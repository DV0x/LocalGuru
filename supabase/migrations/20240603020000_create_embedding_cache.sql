-- Create embedding_cache table if it doesn't exist
CREATE TABLE IF NOT EXISTS public.embedding_cache (
  id bigint generated by default as identity primary key,
  query_hash text not null,
  query_text text not null,
  embedding public.vector(1536) not null,
  source_model text not null,
  created_at timestamp with time zone not null default now()
);

-- Create index on query_hash for quick lookups
CREATE INDEX IF NOT EXISTS embedding_cache_query_hash_idx ON public.embedding_cache (query_hash);

-- Create index on created_at for cache cleanup
CREATE INDEX IF NOT EXISTS embedding_cache_created_at_idx ON public.embedding_cache (created_at);

-- Add a unique constraint on query_hash
ALTER TABLE public.embedding_cache DROP CONSTRAINT IF EXISTS embedding_cache_query_hash_key;
ALTER TABLE public.embedding_cache ADD CONSTRAINT embedding_cache_query_hash_key UNIQUE (query_hash);

-- Grant permissions
GRANT SELECT, INSERT, UPDATE ON public.embedding_cache TO service_role;
GRANT SELECT, INSERT, UPDATE ON public.embedding_cache TO authenticated;
GRANT SELECT, INSERT, UPDATE ON public.embedding_cache TO anon;
GRANT USAGE ON SEQUENCE public.embedding_cache_id_seq TO service_role;
GRANT USAGE ON SEQUENCE public.embedding_cache_id_seq TO authenticated;
GRANT USAGE ON SEQUENCE public.embedding_cache_id_seq TO anon;

-- Setup Row Level Security
ALTER TABLE public.embedding_cache ENABLE ROW LEVEL SECURITY;

-- Create policy to allow read access to all rows
DROP POLICY IF EXISTS "embedding_cache_select_policy" ON public.embedding_cache;
CREATE POLICY "embedding_cache_select_policy" ON public.embedding_cache
  FOR SELECT USING (true);

-- Create policy to allow insert/update access to all rows
DROP POLICY IF EXISTS "embedding_cache_insert_policy" ON public.embedding_cache;
CREATE POLICY "embedding_cache_insert_policy" ON public.embedding_cache
  FOR INSERT WITH CHECK (true);
  
DROP POLICY IF EXISTS "embedding_cache_update_policy" ON public.embedding_cache;
CREATE POLICY "embedding_cache_update_policy" ON public.embedding_cache
  FOR UPDATE USING (true) WITH CHECK (true); 